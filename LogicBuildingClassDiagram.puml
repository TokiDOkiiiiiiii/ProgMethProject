@startuml
abstract class logic.building.base.School {
+ {static} int genMul
+ {static} int maintainCost
}
class logic.building.misc.Tile {
- Building building
- boolean ownByPlayer
- boolean clearingArea
+ <<Create>> Tile()
+ <<Create>> Tile(boolean)
+ <<Create>> Tile(boolean,Building)
+ boolean isOccupied()
+ void setBuilding(Building)
+ void removeBuilding()
+ Building getBuilding()
+ boolean isOwnByPlayer()
+ void setOwnByPlayer(boolean)
+ void setClearingArea(boolean)
+ boolean isClearingArea()
}
class logic.building.TownHall {
- int level
+ String url1
+ String url2
+ String url3
- boolean upgrading
+ <<Create>> TownHall()
+ void upgradeLevel()
+ String buyUpgrade()
+ boolean isUpgrading()
+ int getLevel()
+ String getUrl()
+ String toString()
}
interface logic.building.base.Activatable {
+ boolean isActive()
+ void setActive(boolean)
+ void turnOn(boolean)
}
class logic.building.misc.BuildingRuin {
+ String url1
- int buildingId
+ <<Create>> BuildingRuin(int)
+ int getBuildingId()
+ String toString()
+ String getUrl()
}
class logic.building.Temple {
- boolean active
+ {static} int faithGen
+ {static} int maintainCost
+ String url1
+ <<Create>> Temple()
+ void turnOn(boolean)
+ void setActive(boolean)
+ boolean isActive()
+ String getUrl()
+ String toString()
}
class logic.building.ArmyCamp {
- boolean active
+ {static} int powerGen
+ {static} int maintainCost
+ String url1
+ <<Create>> ArmyCamp()
+ void turnOn(boolean)
+ void setActive(boolean)
+ String toString()
+ boolean isActive()
+ String getUrl()
}
interface logic.building.base.Damageable {
}
abstract class logic.building.base.Building {
+ String url1
+ {abstract}String getUrl()
+ {abstract}String toString()
}
class logic.building.Farm {
+ {static} int moneyGen
+ String url1
+ <<Create>> Farm()
+ String getUrl()
+ String toString()
}
class logic.building.misc.ConstructionSite {
- int targetBuildingCode
+ String url1
+ <<Create>> ConstructionSite(int)
+ Building construct()
+ String toString()
+ String getUrl()
}
class logic.building.ArmySchool {
- boolean active
+ String url1
+ <<Create>> ArmySchool()
+ void turnOn(boolean)
+ void setActive(boolean)
+ boolean isActive()
+ String toString()
+ String getUrl()
}
interface logic.building.base.Demolishable {
}
class logic.building.CampingSite {
+ String url1
- int countDay
- boolean active
- boolean success
- int successRate
+ {static} int maintainCost
- Random random
+ <<Create>> CampingSite()
+ void turnOn(boolean)
+ void setActive(boolean)
+ void accumulate()
+ void reset()
+ void explore()
+ int getSuccesRate()
+ void setSuccessRate(int)
+ boolean isActive()
+ int getCountDay()
+ boolean countDown()
+ boolean isExploring()
+ String toString()
+ String getUrl()
}
class logic.building.FarmSchool {
- boolean active
+ String url1
+ <<Create>> FarmSchool()
+ void turnOn(boolean)
+ void setActive(boolean)
+ boolean isActive()
+ String getUrl()
+ String toString()
}
class logic.building.misc.Demolishing {
+ String url1
+ String toString()
+ String getUrl()
}


logic.building.base.Building <|-- logic.building.base.School
logic.building.base.Building <|-- logic.building.TownHall
logic.building.base.Building <|-- logic.building.misc.BuildingRuin
logic.building.base.Activatable <|.. logic.building.Temple
logic.building.base.Demolishable <|.. logic.building.Temple
logic.building.base.Building <|-- logic.building.Temple
logic.building.base.Activatable <|.. logic.building.ArmyCamp
logic.building.Demolishable <|.. logic.building.ArmyCamp
logic.building.Damageable <|.. logic.building.ArmyCamp
logic.building.Building <|-- logic.building.ArmyCamp
logic.building.base.Demolishable <|.. logic.building.Farm
logic.building.base.Damageable <|.. logic.building.Farm
logic.building.base.Building <|-- logic.building.Farm
logic.building.base.Building <|-- logic.building.misc.ConstructionSite
logic.building.base.Activatable <|.. logic.building.ArmySchool
logic.building.base.Demolishable <|.. logic.building.ArmySchool
logic.building.base.School <|-- logic.building.ArmySchool
logic.building.base.Activatable <|.. logic.building.CampingSite
logic.building.base.Demolishable <|.. logic.building.CampingSite
logic.building.base.Building <|-- logic.building.CampingSite
logic.building.base.Activatable <|.. logic.building.FarmSchool
logic.building.base.Demolishable <|.. logic.building.FarmSchool
logic.building.base.School <|-- logic.building.FarmSchool
logic.building.base.Building <|-- logic.building.misc.Demolishing
@enduml